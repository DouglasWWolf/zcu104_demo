// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module controller_write_dec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        value_r,
        is_signed,
        width,
        uart_xmit_fifo_din,
        uart_xmit_fifo_full_n,
        uart_xmit_fifo_write
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] value_r;
input  [0:0] is_signed;
input  [7:0] width;
output  [7:0] uart_xmit_fifo_din;
input   uart_xmit_fifo_full_n;
output   uart_xmit_fifo_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg uart_xmit_fifo_write;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] powers_address0;
reg    powers_ce0;
wire   [27:0] powers_q0;
reg    uart_xmit_fifo_blk_n;
wire    ap_CS_fsm_state21;
wire   [4:0] string_length_3_fu_585_p3;
reg   [4:0] string_length_3_reg_913;
wire    ap_CS_fsm_state16;
wire   [7:0] zext_ln119_fu_593_p1;
reg   [7:0] zext_ln119_reg_918;
wire   [0:0] and_ln160_fu_605_p2;
reg   [0:0] and_ln160_reg_924;
wire   [3:0] add_ln173_fu_644_p2;
reg   [3:0] add_ln173_reg_932;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln173_fu_638_p2;
wire   [0:0] is_rightmost_digit_fu_650_p2;
reg   [0:0] is_rightmost_digit_reg_942;
wire   [4:0] msd_index_9_fu_676_p3;
reg   [4:0] msd_index_9_reg_954;
wire   [7:0] string_length_4_fu_684_p3;
reg   [7:0] string_length_4_reg_959;
wire   [31:0] zext_ln176_fu_700_p1;
reg   [31:0] zext_ln176_reg_964;
wire    ap_CS_fsm_state18;
wire   [7:0] digit_fu_708_p2;
wire   [3:0] add_ln187_fu_720_p2;
wire    ap_CS_fsm_state19;
wire   [4:0] digit_5_fu_731_p2;
wire   [0:0] icmp_ln187_fu_714_p2;
wire   [0:0] icmp_ln189_fu_726_p2;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln228_fu_857_p2;
reg   [4:0] buffer_address0;
reg    buffer_ce0;
reg    buffer_we0;
reg   [7:0] buffer_d0;
wire   [7:0] buffer_q0;
reg   [4:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
reg   [7:0] buffer_d1;
reg   [3:0] i_3_reg_499;
reg  signed [4:0] digit_4_reg_510;
reg   [7:0] ap_phi_mux_digit_1_phi_fu_524_p4;
reg   [7:0] digit_1_reg_521;
wire   [7:0] zext_ln187_fu_751_p1;
reg   [7:0] ap_phi_mux_digit_3_phi_fu_533_p6;
wire   [0:0] icmp_ln196_fu_756_p2;
wire   [0:0] and_ln199_fu_776_p2;
wire   [7:0] select_ln199_1_fu_793_p3;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln119_1_fu_633_p1;
wire   [63:0] zext_ln208_fu_813_p1;
wire   [63:0] zext_ln119_2_fu_836_p1;
wire   [63:0] zext_ln230_fu_873_p1;
reg   [3:0] pow_idx_fu_144;
reg   [4:0] out_index_fu_148;
wire   [4:0] add_ln214_fu_830_p2;
reg   [31:0] value_assign_2_fu_152;
wire   [31:0] sub_ln191_fu_737_p2;
wire   [31:0] select_ln160_fu_617_p3;
reg   [7:0] msd_index_7_fu_156;
wire   [7:0] zext_ln199_fu_789_p1;
wire   [7:0] zext_ln209_fu_818_p1;
reg   [7:0] i_fu_164;
wire   [7:0] i_5_fu_862_p2;
wire   [2:0] tmp_fu_569_p4;
wire   [0:0] icmp_ln146_fu_579_p2;
wire   [4:0] empty_fu_565_p1;
wire   [0:0] tmp_1_fu_597_p3;
wire   [31:0] sub_ln162_fu_611_p2;
wire   [7:0] string_length_fu_660_p2;
wire   [0:0] icmp_ln221_fu_666_p2;
wire   [4:0] msd_index_fu_671_p2;
wire   [4:0] trunc_ln119_fu_656_p1;
wire  signed [29:0] sext_ln176_fu_696_p1;
wire   [7:0] trunc_ln183_fu_704_p1;
wire  signed [5:0] sext_ln187_fu_747_p1;
wire   [0:0] icmp_ln199_fu_765_p2;
wire   [0:0] or_ln199_fu_771_p2;
wire   [4:0] select_ln199_fu_781_p3;
wire   [4:0] add_ln207_fu_807_p2;
wire   [4:0] trunc_ln228_fu_853_p1;
wire   [4:0] add_ln230_fu_868_p2;
reg   [20:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_condition_637;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

controller_write_dec_powers_ROM_AUTO_1R #(
    .DataWidth( 28 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
powers_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(powers_address0),
    .ce0(powers_ce0),
    .q0(powers_q0)
);

controller_write_dec_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .we0(buffer_we0),
    .d0(buffer_d0),
    .q0(buffer_q0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(buffer_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (((is_rightmost_digit_reg_942 == 1'd0) & (icmp_ln187_fu_714_p2 == 1'd1)) | ((is_rightmost_digit_reg_942 == 1'd0) & (icmp_ln189_fu_726_p2 == 1'd1))))) begin
        digit_1_reg_521 <= zext_ln187_fu_751_p1;
    end else if (((is_rightmost_digit_reg_942 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        digit_1_reg_521 <= digit_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((is_rightmost_digit_reg_942 == 1'd0)) begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            digit_4_reg_510 <= 5'd16;
        end else if ((1'b1 == ap_condition_637)) begin
            digit_4_reg_510 <= digit_5_fu_731_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((is_rightmost_digit_reg_942 == 1'd0)) begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            i_3_reg_499 <= 4'd0;
        end else if ((1'b1 == ap_condition_637)) begin
            i_3_reg_499 <= add_ln187_fu_720_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_fu_638_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i_fu_164 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln228_fu_857_p2 == 1'd1))) begin
        i_fu_164 <= i_5_fu_862_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                msd_index_7_fu_156[0] <= 1'b0;
        msd_index_7_fu_156[1] <= 1'b0;
        msd_index_7_fu_156[2] <= 1'b0;
        msd_index_7_fu_156[3] <= 1'b0;
        msd_index_7_fu_156[4] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state19) & ((((1'd1 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln187_fu_714_p2 == 1'd1)) | ((1'd1 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln189_fu_726_p2 == 1'd1))) | ((1'd1 == and_ln199_fu_776_p2) & (is_rightmost_digit_reg_942 == 1'd1) & (icmp_ln196_fu_756_p2 == 1'd1))))) begin
                msd_index_7_fu_156[4 : 0] <= zext_ln209_fu_818_p1[4 : 0];
    end else if (((1'b1 == ap_CS_fsm_state19) & ((((1'd0 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln187_fu_714_p2 == 1'd1)) | ((1'd0 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln189_fu_726_p2 == 1'd1))) | ((is_rightmost_digit_reg_942 == 1'd1) & (1'd0 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1))))) begin
                msd_index_7_fu_156[4 : 0] <= zext_ln199_fu_789_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_index_fu_148 <= 5'd21;
    end else if (((1'b1 == ap_CS_fsm_state19) & ((is_rightmost_digit_reg_942 == 1'd1) | ((icmp_ln189_fu_726_p2 == 1'd1) | (icmp_ln187_fu_714_p2 == 1'd1))))) begin
        out_index_fu_148 <= add_ln214_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        pow_idx_fu_144 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state19) & ((is_rightmost_digit_reg_942 == 1'd1) | ((icmp_ln189_fu_726_p2 == 1'd1) | (icmp_ln187_fu_714_p2 == 1'd1))))) begin
        pow_idx_fu_144 <= add_ln173_reg_932;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        value_assign_2_fu_152 <= select_ln160_fu_617_p3;
    end else if (((is_rightmost_digit_reg_942 == 1'd0) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln189_fu_726_p2 == 1'd0) & (icmp_ln187_fu_714_p2 == 1'd0))) begin
        value_assign_2_fu_152 <= sub_ln191_fu_737_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln173_reg_932 <= add_ln173_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        and_ln160_reg_924 <= and_ln160_fu_605_p2;
        string_length_3_reg_913 <= string_length_3_fu_585_p3;
        zext_ln119_reg_918[4 : 0] <= zext_ln119_fu_593_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_fu_638_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        is_rightmost_digit_reg_942 <= is_rightmost_digit_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_fu_638_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        msd_index_9_reg_954 <= msd_index_9_fu_676_p3;
        string_length_4_reg_959 <= string_length_4_fu_684_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        zext_ln176_reg_964[29 : 0] <= zext_ln176_fu_700_p1[29 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((uart_xmit_fifo_full_n == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state20) & (icmp_ln228_fu_857_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (((is_rightmost_digit_reg_942 == 1'd0) & (icmp_ln187_fu_714_p2 == 1'd1)) | ((is_rightmost_digit_reg_942 == 1'd0) & (icmp_ln189_fu_726_p2 == 1'd1))))) begin
        ap_phi_mux_digit_1_phi_fu_524_p4 = zext_ln187_fu_751_p1;
    end else begin
        ap_phi_mux_digit_1_phi_fu_524_p4 = digit_1_reg_521;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & ((((1'd0 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln187_fu_714_p2 == 1'd1)) | ((1'd0 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln189_fu_726_p2 == 1'd1))) | ((is_rightmost_digit_reg_942 == 1'd1) & (1'd0 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1))))) begin
        ap_phi_mux_digit_3_phi_fu_533_p6 = select_ln199_1_fu_793_p3;
    end else if ((((1'b1 == ap_CS_fsm_state19) & ((((icmp_ln196_fu_756_p2 == 1'd0) & (icmp_ln187_fu_714_p2 == 1'd1)) | ((icmp_ln196_fu_756_p2 == 1'd0) & (icmp_ln189_fu_726_p2 == 1'd1))) | ((is_rightmost_digit_reg_942 == 1'd1) & (icmp_ln196_fu_756_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state19) & ((((1'd1 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln187_fu_714_p2 == 1'd1)) | ((1'd1 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln189_fu_726_p2 == 1'd1))) | ((1'd1 == and_ln199_fu_776_p2) & (is_rightmost_digit_reg_942 == 1'd1) & (icmp_ln196_fu_756_p2 == 1'd1)))))) begin
        ap_phi_mux_digit_3_phi_fu_533_p6 = ap_phi_mux_digit_1_phi_fu_524_p4;
    end else begin
        ap_phi_mux_digit_3_phi_fu_533_p6 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln228_fu_857_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_address0 = zext_ln230_fu_873_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_address0 = zext_ln119_2_fu_836_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buffer_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buffer_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_address0 = 64'd1;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_address1 = zext_ln208_fu_813_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buffer_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buffer_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_address1 = 64'd0;
    end else begin
        buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_d0 = ap_phi_mux_digit_3_phi_fu_533_p6;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_d0 = 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buffer_d0 = 8'd32;
    end else begin
        buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_d1 = 8'd45;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buffer_d1 = 8'd32;
    end else begin
        buffer_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state19) & ((is_rightmost_digit_reg_942 == 1'd1) | ((icmp_ln189_fu_726_p2 == 1'd1) | (icmp_ln187_fu_714_p2 == 1'd1)))))) begin
        buffer_we0 = 1'b1;
    end else begin
        buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state19) & ((((1'd1 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln187_fu_714_p2 == 1'd1)) | ((1'd1 == and_ln199_fu_776_p2) & (icmp_ln196_fu_756_p2 == 1'd1) & (icmp_ln189_fu_726_p2 == 1'd1))) | ((1'd1 == and_ln199_fu_776_p2) & (is_rightmost_digit_reg_942 == 1'd1) & (icmp_ln196_fu_756_p2 == 1'd1)))))) begin
        buffer_we1 = 1'b1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        powers_ce0 = 1'b1;
    end else begin
        powers_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        uart_xmit_fifo_blk_n = uart_xmit_fifo_full_n;
    end else begin
        uart_xmit_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((uart_xmit_fifo_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        uart_xmit_fifo_write = 1'b1;
    end else begin
        uart_xmit_fifo_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln173_fu_638_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & ((is_rightmost_digit_reg_942 == 1'd1) | ((icmp_ln189_fu_726_p2 == 1'd1) | (icmp_ln187_fu_714_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln228_fu_857_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((uart_xmit_fifo_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln173_fu_644_p2 = (pow_idx_fu_144 + 4'd1);

assign add_ln187_fu_720_p2 = (i_3_reg_499 + 4'd1);

assign add_ln207_fu_807_p2 = ($signed(out_index_fu_148) + $signed(5'd31));

assign add_ln214_fu_830_p2 = (out_index_fu_148 + 5'd1);

assign add_ln230_fu_868_p2 = (trunc_ln228_fu_853_p1 + msd_index_9_reg_954);

assign and_ln160_fu_605_p2 = (tmp_1_fu_597_p3 & is_signed);

assign and_ln199_fu_776_p2 = (or_ln199_fu_771_p2 & and_ln160_reg_924);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_637 = ((1'b1 == ap_CS_fsm_state19) & (icmp_ln189_fu_726_p2 == 1'd0) & (icmp_ln187_fu_714_p2 == 1'd0));
end

assign digit_5_fu_731_p2 = ($signed(digit_4_reg_510) + $signed(5'd1));

assign digit_fu_708_p2 = (trunc_ln183_fu_704_p1 + 8'd48);

assign empty_fu_565_p1 = width[4:0];

assign i_5_fu_862_p2 = (i_fu_164 + 8'd1);

assign icmp_ln146_fu_579_p2 = ((tmp_fu_569_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_638_p2 = ((pow_idx_fu_144 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln187_fu_714_p2 = ((i_3_reg_499 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln189_fu_726_p2 = ((value_assign_2_fu_152 < zext_ln176_reg_964) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_756_p2 = ((msd_index_7_fu_156 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln199_fu_765_p2 = ((ap_phi_mux_digit_1_phi_fu_524_p4 != 8'd48) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_666_p2 = ((zext_ln119_reg_918 > string_length_fu_660_p2) ? 1'b1 : 1'b0);

assign icmp_ln228_fu_857_p2 = ((i_fu_164 < string_length_4_reg_959) ? 1'b1 : 1'b0);

assign is_rightmost_digit_fu_650_p2 = ((pow_idx_fu_144 == 4'd9) ? 1'b1 : 1'b0);

assign msd_index_9_fu_676_p3 = ((icmp_ln221_fu_666_p2[0:0] == 1'b1) ? msd_index_fu_671_p2 : trunc_ln119_fu_656_p1);

assign msd_index_fu_671_p2 = (string_length_3_reg_913 ^ 5'd31);

assign or_ln199_fu_771_p2 = (is_rightmost_digit_reg_942 | icmp_ln199_fu_765_p2);

assign powers_address0 = zext_ln119_1_fu_633_p1;

assign select_ln160_fu_617_p3 = ((and_ln160_fu_605_p2[0:0] == 1'b1) ? sub_ln162_fu_611_p2 : value_r);

assign select_ln199_1_fu_793_p3 = ((or_ln199_fu_771_p2[0:0] == 1'b1) ? ap_phi_mux_digit_1_phi_fu_524_p4 : 8'd32);

assign select_ln199_fu_781_p3 = ((or_ln199_fu_771_p2[0:0] == 1'b1) ? out_index_fu_148 : 5'd0);

assign sext_ln176_fu_696_p1 = $signed(powers_q0);

assign sext_ln187_fu_747_p1 = digit_4_reg_510;

assign string_length_3_fu_585_p3 = ((icmp_ln146_fu_579_p2[0:0] == 1'b1) ? 5'd31 : empty_fu_565_p1);

assign string_length_4_fu_684_p3 = ((icmp_ln221_fu_666_p2[0:0] == 1'b1) ? zext_ln119_reg_918 : string_length_fu_660_p2);

assign string_length_fu_660_p2 = (8'd31 - msd_index_7_fu_156);

assign sub_ln162_fu_611_p2 = (32'd0 - value_r);

assign sub_ln191_fu_737_p2 = (value_assign_2_fu_152 - zext_ln176_reg_964);

assign tmp_1_fu_597_p3 = value_r[32'd31];

assign tmp_fu_569_p4 = {{width[7:5]}};

assign trunc_ln119_fu_656_p1 = msd_index_7_fu_156[4:0];

assign trunc_ln183_fu_704_p1 = value_assign_2_fu_152[7:0];

assign trunc_ln228_fu_853_p1 = i_fu_164[4:0];

assign uart_xmit_fifo_din = buffer_q0;

assign zext_ln119_1_fu_633_p1 = pow_idx_fu_144;

assign zext_ln119_2_fu_836_p1 = out_index_fu_148;

assign zext_ln119_fu_593_p1 = string_length_3_fu_585_p3;

assign zext_ln176_fu_700_p1 = $unsigned(sext_ln176_fu_696_p1);

assign zext_ln187_fu_751_p1 = $unsigned(sext_ln187_fu_747_p1);

assign zext_ln199_fu_789_p1 = select_ln199_fu_781_p3;

assign zext_ln208_fu_813_p1 = add_ln207_fu_807_p2;

assign zext_ln209_fu_818_p1 = add_ln207_fu_807_p2;

assign zext_ln230_fu_873_p1 = add_ln230_fu_868_p2;

always @ (posedge ap_clk) begin
    zext_ln119_reg_918[7:5] <= 3'b000;
    zext_ln176_reg_964[31:30] <= 2'b00;
    msd_index_7_fu_156[7:5] <= 3'b000;
end

endmodule //controller_write_dec
