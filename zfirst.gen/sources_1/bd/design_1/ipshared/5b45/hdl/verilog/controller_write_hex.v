// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module controller_write_hex (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        value_r,
        zero_fill,
        uppercase,
        width,
        uart_xmit_fifo_din,
        uart_xmit_fifo_full_n,
        uart_xmit_fifo_write
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] value_r;
input  [0:0] zero_fill;
input  [0:0] uppercase;
input  [7:0] width;
output  [7:0] uart_xmit_fifo_din;
input   uart_xmit_fifo_full_n;
output   uart_xmit_fifo_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg uart_xmit_fifo_write;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] shift_address0;
reg    shift_ce0;
wire   [4:0] shift_q0;
reg    uart_xmit_fifo_blk_n;
wire    ap_CS_fsm_state12;
wire   [6:0] select_ln241_fu_333_p3;
reg   [6:0] select_ln241_reg_662;
wire    ap_CS_fsm_state8;
wire   [3:0] empty_fu_358_p1;
reg   [3:0] empty_reg_679;
wire   [6:0] select_ln285_fu_362_p3;
reg   [6:0] select_ln285_reg_684;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln279_fu_378_p2;
wire   [0:0] icmp_ln291_1_fu_390_p2;
reg   [0:0] icmp_ln291_1_reg_697;
wire   [3:0] msd_index_6_fu_449_p3;
reg   [3:0] msd_index_6_reg_709;
wire   [7:0] string_length_2_fu_457_p3;
reg   [7:0] string_length_2_reg_714;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln312_fu_610_p2;
reg   [3:0] buffer_address0;
reg    buffer_ce0;
reg    buffer_we0;
reg   [6:0] buffer_d0;
reg   [3:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
reg   [6:0] buffer_d1;
wire   [6:0] buffer_q1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln279_fu_373_p1;
wire   [63:0] zext_ln279_1_fu_588_p1;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln314_fu_626_p1;
reg   [7:0] msd_index_2_fu_112;
wire   [7:0] msd_index_8_fu_565_p3;
reg   [3:0] digit_index_fu_116;
wire   [3:0] add_ln279_fu_384_p2;
reg   [3:0] msd_index_3_fu_120;
wire   [3:0] add_ln298_fu_582_p2;
reg   [7:0] i_fu_128;
wire   [7:0] i_2_fu_615_p2;
wire   [6:0] digit_2_fu_573_p3;
wire   [3:0] tmp_fu_405_p4;
wire   [0:0] icmp_ln260_fu_414_p2;
wire   [3:0] string_length_1_fu_420_p3;
wire   [7:0] zext_ln302_fu_427_p1;
wire   [7:0] string_length_fu_431_p2;
wire   [0:0] icmp_ln305_fu_437_p2;
wire   [3:0] msd_index_fu_443_p2;
wire   [3:0] trunc_ln279_fu_401_p1;
wire   [31:0] zext_ln282_fu_473_p1;
wire   [31:0] lshr_ln282_fu_477_p2;
wire   [3:0] nybble_fu_482_p1;
wire   [4:0] or_ln_fu_496_p3;
wire  signed [5:0] sext_ln285_fu_504_p1;
wire   [6:0] zext_ln282_1_fu_486_p1;
wire   [0:0] icmp_ln285_fu_490_p2;
wire   [6:0] zext_ln285_fu_508_p1;
wire   [6:0] add_ln285_fu_512_p2;
wire   [6:0] digit_fu_517_p3;
wire   [0:0] icmp_ln291_fu_531_p2;
wire   [0:0] and_ln291_fu_537_p2;
wire   [4:0] zext_ln291_fu_542_p1;
wire   [4:0] msd_index_7_fu_546_p3;
wire   [0:0] icmp_ln288_fu_525_p2;
wire  signed [7:0] sext_ln291_fu_554_p1;
wire   [6:0] digit_1_fu_558_p3;
wire   [3:0] trunc_ln312_fu_606_p1;
wire   [3:0] add_ln314_fu_621_p2;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

controller_write_hex_shift_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_address0),
    .ce0(shift_ce0),
    .q0(shift_q0)
);

controller_write_hex_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 7 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .we0(buffer_we0),
    .d0(buffer_d0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(buffer_d1),
    .q1(buffer_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        digit_index_fu_116 <= 4'd0;
    end else if (((icmp_ln279_fu_378_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        digit_index_fu_116 <= add_ln279_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_378_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_fu_128 <= 8'd0;
    end else if (((icmp_ln312_fu_610_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_fu_128 <= i_2_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        msd_index_2_fu_112 <= 8'd255;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        msd_index_2_fu_112 <= msd_index_8_fu_565_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        msd_index_3_fu_120 <= 4'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        msd_index_3_fu_120 <= add_ln298_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_reg_679 <= empty_fu_358_p1;
        select_ln285_reg_684[6 : 5] <= select_ln285_fu_362_p3[6 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_378_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        icmp_ln291_1_reg_697 <= icmp_ln291_1_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_378_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        msd_index_6_reg_709 <= msd_index_6_fu_449_p3;
        string_length_2_reg_714 <= string_length_2_fu_457_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        select_ln241_reg_662[4] <= select_ln241_fu_333_p3[4];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((uart_xmit_fifo_full_n == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln312_fu_610_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln312_fu_610_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_address0 = zext_ln279_1_fu_588_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_address0 = 64'd1;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        buffer_address1 = zext_ln314_fu_626_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_address1 = 64'd0;
    end else begin
        buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_d0 = digit_2_fu_573_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_d0 = 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buffer_d0 = select_ln241_reg_662;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_d0 = select_ln241_fu_333_p3;
    end else begin
        buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buffer_d1 = select_ln241_reg_662;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_d1 = select_ln241_fu_333_p3;
    end else begin
        buffer_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        buffer_we0 = 1'b1;
    end else begin
        buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        buffer_we1 = 1'b1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        shift_ce0 = 1'b1;
    end else begin
        shift_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        uart_xmit_fifo_blk_n = uart_xmit_fifo_full_n;
    end else begin
        uart_xmit_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((uart_xmit_fifo_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        uart_xmit_fifo_write = 1'b1;
    end else begin
        uart_xmit_fifo_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln279_fu_378_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln312_fu_610_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((uart_xmit_fifo_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln279_fu_384_p2 = (digit_index_fu_116 + 4'd1);

assign add_ln285_fu_512_p2 = (zext_ln282_1_fu_486_p1 + select_ln285_reg_684);

assign add_ln298_fu_582_p2 = (msd_index_3_fu_120 + 4'd1);

assign add_ln314_fu_621_p2 = (trunc_ln312_fu_606_p1 + msd_index_6_reg_709);

assign and_ln291_fu_537_p2 = (icmp_ln291_fu_531_p2 & icmp_ln291_1_reg_697);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign digit_1_fu_558_p3 = ((and_ln291_fu_537_p2[0:0] == 1'b1) ? select_ln241_reg_662 : digit_fu_517_p3);

assign digit_2_fu_573_p3 = ((icmp_ln288_fu_525_p2[0:0] == 1'b1) ? digit_1_fu_558_p3 : digit_fu_517_p3);

assign digit_fu_517_p3 = ((icmp_ln285_fu_490_p2[0:0] == 1'b1) ? zext_ln285_fu_508_p1 : add_ln285_fu_512_p2);

assign empty_fu_358_p1 = width[3:0];

assign i_2_fu_615_p2 = (i_fu_128 + 8'd1);

assign icmp_ln260_fu_414_p2 = ((tmp_fu_405_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln279_fu_378_p2 = ((digit_index_fu_116 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_490_p2 = ((nybble_fu_482_p1 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln288_fu_525_p2 = ((msd_index_2_fu_112 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln291_1_fu_390_p2 = ((digit_index_fu_116 != 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln291_fu_531_p2 = ((digit_fu_517_p3 == 7'd48) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_437_p2 = ((zext_ln302_fu_427_p1 > string_length_fu_431_p2) ? 1'b1 : 1'b0);

assign icmp_ln312_fu_610_p2 = ((i_fu_128 < string_length_2_reg_714) ? 1'b1 : 1'b0);

assign lshr_ln282_fu_477_p2 = value_r >> zext_ln282_fu_473_p1;

assign msd_index_6_fu_449_p3 = ((icmp_ln305_fu_437_p2[0:0] == 1'b1) ? msd_index_fu_443_p2 : trunc_ln279_fu_401_p1);

assign msd_index_7_fu_546_p3 = ((and_ln291_fu_537_p2[0:0] == 1'b1) ? 5'd31 : zext_ln291_fu_542_p1);

assign msd_index_8_fu_565_p3 = ((icmp_ln288_fu_525_p2[0:0] == 1'b1) ? sext_ln291_fu_554_p1 : msd_index_2_fu_112);

assign msd_index_fu_443_p2 = (string_length_1_fu_420_p3 ^ 4'd15);

assign nybble_fu_482_p1 = lshr_ln282_fu_477_p2[3:0];

assign or_ln_fu_496_p3 = {{1'd1}, {nybble_fu_482_p1}};

assign select_ln241_fu_333_p3 = ((zero_fill[0:0] == 1'b1) ? 7'd48 : 7'd32);

assign select_ln285_fu_362_p3 = ((uppercase[0:0] == 1'b1) ? 7'd55 : 7'd87);

assign sext_ln285_fu_504_p1 = $signed(or_ln_fu_496_p3);

assign sext_ln291_fu_554_p1 = $signed(msd_index_7_fu_546_p3);

assign shift_address0 = zext_ln279_fu_373_p1;

assign string_length_1_fu_420_p3 = ((icmp_ln260_fu_414_p2[0:0] == 1'b1) ? 4'd15 : empty_reg_679);

assign string_length_2_fu_457_p3 = ((icmp_ln305_fu_437_p2[0:0] == 1'b1) ? zext_ln302_fu_427_p1 : string_length_fu_431_p2);

assign string_length_fu_431_p2 = (8'd15 - msd_index_2_fu_112);

assign tmp_fu_405_p4 = {{width[7:4]}};

assign trunc_ln279_fu_401_p1 = msd_index_2_fu_112[3:0];

assign trunc_ln312_fu_606_p1 = i_fu_128[3:0];

assign uart_xmit_fifo_din = buffer_q1;

assign zext_ln279_1_fu_588_p1 = msd_index_3_fu_120;

assign zext_ln279_fu_373_p1 = digit_index_fu_116;

assign zext_ln282_1_fu_486_p1 = nybble_fu_482_p1;

assign zext_ln282_fu_473_p1 = shift_q0;

assign zext_ln285_fu_508_p1 = $unsigned(sext_ln285_fu_504_p1);

assign zext_ln291_fu_542_p1 = msd_index_3_fu_120;

assign zext_ln302_fu_427_p1 = string_length_1_fu_420_p3;

assign zext_ln314_fu_626_p1 = add_ln314_fu_621_p2;

always @ (posedge ap_clk) begin
    select_ln241_reg_662[3:0] <= 4'b0000;
    select_ln241_reg_662[6:5] <= 2'b01;
    select_ln285_reg_684[4:0] <= 5'b10111;
end

endmodule //controller_write_hex
